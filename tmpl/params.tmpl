<?js /*
    Copyright 2011 the JSDoc Authors.
    Modifications Copyright 2025 Frank Kudermann - alphanull.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        https://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/ ?>

<?js
    var params = obj;

    /* sort subparams under their parent params (like opts.classname) */
    var parentParam = null;
    params.forEach(function(param, i) {
        var match;
        var paramRegExp;

        if (!param) {
            return;
        }

        if (parentParam && parentParam.name && param.name) {
            try {
                paramRegExp = new RegExp('^(?:' + parentParam.name + '(?:\\[\\])*)\\.(.+)$');
            }
            catch (e) {
                // there's probably a typo in the JSDoc comment that resulted in a weird
                // parameter name
                return;
            }

            match = param.name.match(paramRegExp);
            if ( match ) {
                param.name = match[1];
                parentParam.subparams = parentParam.subparams || [];
                parentParam.subparams.push(param);
                params[i] = null;
            }
            else {
                parentParam = param;
            }
        }
        else {
            parentParam = param;
        }
    });

    /* determine if we need extra columns, "attributes" and "default" */
    params.hasAttributes = false;
    params.hasDefault = false;
    params.hasName = false;

    params.forEach(function(param) {
        if (!param) { return; }
        if (param.optional || param.nullable || param.variable) {
            params.hasAttributes = true;
        }

        if (param.name) {
            params.hasName = true;
        }

        if (typeof param.defaultvalue !== 'undefined') {
            params.hasDefault = true;
        }
    });
?>

<figure class="params">
<figcaption>Parameters:</figcaption>

<table class="params">
    <thead>
    <tr>
        <?js if (params.hasName) {?>
        <th>Name</th>
        <?js } ?>

        <th>Type</th>

        <?js if (params.hasAttributes) {?>
        <th>Attributes</th>
        <?js } ?>

        <?js if (params.hasDefault) {?>
        <th>Default</th>
        <?js } ?>

        <th class="last">Description</th>
    </tr>
    </thead>

    <tbody>
    <?js
        var self = this;

        params.forEach(function(param) {
            if (!param) { return; }
    ?>

        <tr>
            <?js if (params.hasName) {?>
            <td data-label="Name" class="name"><code><?js= param.name ?></code></td>
            <?js } ?>

            <td data-label="Type" class="type <?js= param.type && param.type.names ? '' : 'is-empty' ?>">
            <?js if (param.type && param.type.names) {?>
                <?js= self.partial('type.tmpl', param.type.names) ?>
            <?js } ?>
            </td>

            <?js if (params.hasAttributes) {?>
            <td data-label="Attributes" class="attributes <?js= param.optional || param.nullable || param.variable ? '' : 'is-empty' ?>">
                <?js if (param.optional || param.nullable || param.variable) {?>
                <span class="param-attributes">
                <?js if (param.optional) { ?><span class="attribute">optional</span><?js } ?>
                <?js if (param.nullable) { ?><span class="attribute">nullable</span><?js } ?>
                <?js if (param.variable) { ?><span class="attribute">repeatable</span><?js } ?>
                </span>
                <?js } ?>
            </td>
            <?js } ?>

            <?js if (params.hasDefault) {?>
            <td data-label="Default" class="default <?js= typeof param.defaultvalue !== 'undefined' ? '' : 'is-empty' ?>">
            <?js if (typeof param.defaultvalue !== 'undefined') { ?>
                <?js= self.htmlsafe(param.defaultvalue) ?>
            <?js } ?>
            </td>
            <?js } ?>

            <td data-label="Description" class="description last <?js= param.description || param.subparams ? ' ' : 'is-empty' ?>  <?js= param.subparams ? ' has-sub' : '' ?>">
                <?js= param.description ?>
                <?js if (param.subparams) { ?>
                <?js= self.partial('params.tmpl', param.subparams) ?>
                <?js } ?>
            </td>
        </tr>

    <?js }); ?>
    </tbody>
</table>

</figure>
